generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your database provider
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Profesor
  Secretariat
  Admin
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     Role   @default(Student) // Default role is Student
}

model Profesori {
  id_profesor      String        @id @default(uuid())
  lastName         String?
  firstName        String?
  emailAddress     String        // Now required
  phoneNumber      String?
  facultyName      String?
  departmentName   String        @default("Exterior")

  idDepartament    String        // Now required
  departament      Departamente  @relation(fields: [idDepartament], references: [idDepartament])

  cereriLegatura   CereriLegatura[]
  examene_as_professor Examene[] @relation("ProfessorToExamene")
  examene_as_assistant Examene[] @relation("AssistantToExamene")
  materii_as_professor Materii[] @relation("ProfessorToMaterii")
  materii_as_assistant Materii[] @relation("AssistantToMaterii")
}

model Departamente {
  idDepartament  String        @id @default(uuid())
  shortName      String?
  longName       String?

  profesori      Profesori[]
}



model Studenti {
  id_student     String     @id
  grupa          String
  anul           Int
  nume           String
  prenume        String
  specializare   String

  CereriLegatura CereriLegatura[]
}

model Sali {
  id_sala        String     @id @default(uuid())
  nume           String
  shortName      String
  buildingName   String


  ExameneSali    ExameneSali[]
}




model Cereri {
  id_cerere      String   @id @default(uuid())
  id_user        String
  id_examene_sali String
  data           DateTime
  ora            DateTime

  ExameneSali    ExameneSali @relation(fields: [id_examene_sali], references: [id_examene_sali])
  CereriLegatura CereriLegatura[]
}

model Examene {
  id_examene   String      @id @default(uuid()) // Auto-generate UUID
  nume_materie String
  data         DateTime
  ora          DateTime
  tip_evaluare String
  actualizatDe String
  actualizatLa DateTime

  professors  Profesori[] @relation("ProfessorToExamene")
  assistants  Profesori[] @relation("AssistantToExamene")
  ExameneSali ExameneSali[]

  //for selecting an exam for a specific groupe
   id_grupa     String?    // Optional relation to a specific group
   grupa        Grupe?     @relation(fields: [id_grupa], references: [id])
   @@index([id_grupa]) // Ensure efficient lookups by id_grupa
}
model Materii {
  id_materie     String   @id @default(uuid())
  nume_materie   String   @unique
  
  professors   Profesori[] @relation("ProfessorToMaterii")
  assistants   Profesori[] @relation("AssistantToMaterii")
 

}
model Grupe {
  id                       String  @id @default(uuid())
  type                     String
  facultyId                String
  specializationShortName  String
  studyYear                String
  groupName                String?
  subgroupIndex            String?
  isModular                String
  orarId                   String

  Examene Examene[]
}





model ExameneSali {
  id_examene_sali String      @id @default(uuid())
  id_examene      String
  id_sala         String
  examene         Examene    @relation(fields: [id_examene], references: [id_examene])
  sala            Sali       @relation(fields: [id_sala], references: [id_sala])
  Cereri          Cereri[]
}

model CereriLegatura {
  id_legatura     String     @id
  id_cerere       String
  id_student      String
  id_profesor     String

  cereri          Cereri     @relation(fields: [id_cerere], references: [id_cerere])
  student         Studenti   @relation(fields: [id_student], references: [id_student])
  profesor        Profesori  @relation(fields: [id_profesor], references: [id_profesor])
}