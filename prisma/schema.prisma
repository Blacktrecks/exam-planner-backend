generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Profesor
  Secretariat
  Admin
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  role     Role   @default(Student)
  
}

model Profesori {
  id_profesor      String        @id @default(uuid())
  lastName         String?
  firstName        String?
  emailAddress     String
  phoneNumber      String?
  facultyName      String?
  departmentName   String        @default("Exterior")

  idDepartament    String
  departament      Departamente  @relation(fields: [idDepartament], references: [idDepartament])

  cereriLegatura   CereriLegatura[]
  examene_as_professor Materii[] @relation("ProfessorToExamene")
  examene_as_assistant Materii[] @relation("AssistantToExamene")

  schedules        Schedule[]    @relation("ProfesoriToSchedule")
}

model Departamente {
  idDepartament  String        @id @default(uuid())
  shortName      String?
  longName       String?

  profesori      Profesori[]
}

model Studenti {
  id_student     String     @id @default(uuid())
  grupa          String
  anul           Int
  nume           String
  prenume        String
  specializare   String

  CereriLegatura CereriLegatura[]
  materiile      Materii[] @relation("StudentToMaterii")
}

model Sali {
  id_sala        String     @id @default(uuid())
  nume           String
  shortName      String
  buildingName   String

  ExameneSali    ExameneSali[]
}

model Cereri {
  id_cerere      String   @id @default(uuid())
  id_user        String
 //id_examene_sali String
  id_materie String
  data           DateTime
  ora            DateTime
  status         String @default("Pending")

  ExameneSali    ExameneSali []
  CereriLegatura CereriLegatura[]
}

model Materii {
  id_materie     String   @id @default(uuid())
  nume_materie   String   @unique
  id_grupa       String?
  groupName      String?
  studyYear      String?
  specializationShortName String?

  professors     Profesori[] @relation("ProfessorToExamene")
  assistants     Profesori[] @relation("AssistantToExamene")
  students       Studenti[]  @relation("StudentToMaterii")
  examene        Examene[]
  grupa          Grupe?      @relation(fields: [id_grupa], references: [id])
schedules      Schedule[]  @relation("MateriiToSchedule") // Added relation to Schedule
  @@index([id_grupa])
}

model Examene {
  id_examene   String      @id @default(uuid())
  id_materie   String
  data         DateTime
  ora          DateTime
  tip_evaluare String
  actualizatDe String?
  actualizatLa DateTime

  ExameneSali  ExameneSali[]
  materie      Materii?     @relation(fields: [id_materie], references: [id_materie])
  grupa        Grupe?      @relation(fields: [id_grupa], references: [id])
  id_grupa     String?

  @@index([id_materie])
  @@index([id_grupa])
}

model Grupe {
  id                       String  @id @default(uuid())
  type                     String
  facultyId                String
  specializationShortName  String
  studyYear                String
  groupName                String?
  subgroupIndex            String?
  isModular                String
  orarId                   String

  Examene     Examene[]
  Materii     Materii[]
  schedules   Schedule[]  @relation("GrupeToSchedule")
}

model ExameneSali {
  id_examene_sali String      @id @default(uuid())
  id_examene      String
  id_sala         String
  examene         Examene    @relation(fields: [id_examene], references: [id_examene])
  sala            Sali       @relation(fields: [id_sala], references: [id_sala])
  Cereri          Cereri[]
}


model Schedule {
  id               String     @id @default(uuid())
  type             String     // e.g., "lab", "curs"
  teacherId        String
  roomId           String
  roomBuilding     String
  roomName         String
  weekDay          Int        // e.g., 1 for Monday, 2 for Tuesday
  startHour        Int        // Start time in minutes from 00:00 (e.g., 480 for 08:00)
  duration         Int        // Duration in minutes
  parity           String     // e.g., "-", "odd", "even"
  otherInfo        String?
  materieId        String
  groupId          String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  Materii          Materii    @relation("MateriiToSchedule", fields: [materieId], references: [id_materie])
  Grupe            Grupe      @relation("GrupeToSchedule", fields: [groupId], references: [id])
  Profesori        Profesori  @relation("ProfesoriToSchedule", fields: [teacherId], references: [id_profesor])
}

model CereriLegatura {
  id_legatura     String     @id @default(uuid())
  id_cerere       String
  id_student      String
  id_profesor     String

  cereri          Cereri     @relation(fields: [id_cerere], references: [id_cerere])
  student         Studenti   @relation(fields: [id_student], references: [id_student])
  profesor        Profesori  @relation(fields: [id_profesor], references: [id_profesor])
}
